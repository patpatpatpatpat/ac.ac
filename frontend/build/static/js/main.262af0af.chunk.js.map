{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AUTH_TOKEN","apiBaseURL","setToken","token","localStorage","setItem","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","app_name","isLoggedIn","makeLoggedIn","bind","assertThisInitialized","storedToken","getItem","setState","user","react_default","a","createElement","App_FilterableClientTable","App_NewClientForm","App_NewAppointmentForm","App_Login","Component","ClientRow","client","first_name","contact_number","React","ClientTable","filterText","rows","clients","forEach","toLowerCase","indexOf","push","App_ClientRow","key","uuid","SearchBar","_this2","handleFilterTextChange","e","onFilterTextChange","target","value","type","placeholder","onChange","FilterableClientTable","_this3","_this4","fetch","method","headers","Content-Type","Authorization","then","response","json","App_SearchBar","App_ClientTable","handleErrors","ok","Error","statusText","NewAppointmentForm","_this5","startDate","moment","add","toDate","notes","selectedServices","clientOptions","serviceOptions","tagOptions","error","appointmentCreated","handleInputChange","handleSubmit","handleClientChange","handleSelectedServicesChange","handleSelectedTagsChange","handleDateChange","_this6","map","id","label","service","name","tag","event","_this7","preventDefault","postData","datetime","tags","services","body","JSON","stringify","catch","defineProperty","selectedOption","selectedOptions","k","selectedServicesIDs","option","selectedTags","onSubmit","className","role","htmlFor","react_select_esm","isClearable","options","inputProps","es","selected","showTimeSelect","timeIntervals","dateFormat","timeCaption","minDate","minTime","hours","minutes","maxTime","monthsShown","isMulti","Creatable_default","NewClientForm","_this8","last_name","clientCreated","_this9","Login","_this10","handleChange","credentials","username","password","non_field_errors","loginResult","length","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","Button","block","disabled","validateForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uLASIA,mNACEC,EAAa,uBAEnB,SAASC,EAASC,GAChBC,aAAaC,QAAQ,aAAcF,GACnCH,EAAa,SAAWG,MAGpBG,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAU,QACVC,YAAY,GAGdT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARHA,mFAYjB,IAAIa,EAAcjB,aAAakB,QAAQ,cACnCD,IACFnB,EAASmB,GACTV,KAAKY,SAAS,CACZN,YAAY,0CAKLO,GACXb,KAAKY,SAAS,CACZN,YAAY,qCAOd,OAFmBN,KAAKI,MAAME,WAI1BQ,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACG,EAAD,OAKFL,EAAAC,EAAAC,cAACI,EAAD,CACEb,aAAcP,KAAKO,sBAjDXc,aA2DZC,mLAEF,IAAMC,EAASvB,KAAKJ,MAAM2B,OAE1B,OACET,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKO,EAAOC,YACZV,EAAAC,EAAAC,cAAA,UAAKO,EAAOE,wBAPIC,IAAML,WAcxBM,mLAEF,IAAMC,EAAa5B,KAAKJ,MAAMgC,WACxBC,EAAO,GAcb,OAZA7B,KAAKJ,MAAMkC,QAAQC,QAAQ,SAACR,IACmC,IAAzDA,EAAOC,WAAWQ,cAAcC,QAAQL,IAG5CC,EAAKK,KACHpB,EAAAC,EAAAC,cAACmB,EAAD,CACEZ,OAAQA,EACRa,IAAKb,EAAOc,UAMhBvB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,2BAGJF,EAAAC,EAAAC,cAAA,eAAQY,GAAaC,WAzBHH,IAAML,WAiC1BiB,cACJ,SAAAA,EAAY1C,GAAO,IAAA2C,EAAA,OAAAzC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsC,IACjBC,EAAAzC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwC,GAAAnC,KAAAH,KAAMJ,KACD4C,uBAAyBD,EAAKC,uBAAuBhC,KAA5BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAyC,KAFbA,sFAKIE,GACrBzC,KAAKJ,MAAM8C,mBAAmBD,EAAEE,OAAOC,wCAIvC,OACE9B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACE6B,KAAK,OACLC,YAAY,YACZF,MAAO5C,KAAKJ,MAAMgC,WAClBmB,SAAU/C,KAAKwC,iCAjBDd,IAAML,WAyBxB2B,cACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAnD,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IACZC,EAAAnD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,QACKI,MAAQ,CACX0B,QAAS,GACTF,WAAY,IAGdqB,EAAKT,uBAAyBS,EAAKT,uBAAuBhC,KAA5BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAmD,KAPlBA,mFAUM,IAAAC,EAAAlD,KASlBmD,MARmB7D,EAAa,2BAChB,CACd8D,OAAQ,MACRC,QAAS,CACPC,eAAgB,mBAChBC,cAAiBlE,KAIlBmE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJP,EAAKtC,SAAS,CACZkB,QAAS2B,qDAKM7B,GACrB5B,KAAKY,SAAS,CACZgB,WAAYA,qCAId,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAD,CACE/B,WAAY5B,KAAKI,MAAMwB,WACvBc,mBAAoB1C,KAAKwC,yBAE3B1B,EAAAC,EAAAC,cAAC4C,EAAD,CACE9B,QAAS9B,KAAKI,MAAM0B,QACpBF,WAAY5B,KAAKI,MAAMwB,qBA3CGP,aAkDrB1B,IAGf,SAASkE,EAAaJ,GACpB,IAAKA,EAASK,GACZ,MAAMC,MAAMN,EAASO,YAEvB,OAAOP,MAIHQ,cACF,SAAAA,EAAYrE,GAAO,IAAAsE,EAAA,OAAApE,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,IACjBC,EAAApE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,KAAMJ,KACDQ,MAAQ,CACX+D,UAAWC,MAASC,IAAI,EAAG,QAAQC,SACnC/C,OAAQ,GACRgD,MAAO,GACPC,iBAAkB,GAClBC,cAAe,GACfC,eAAgB,GAChBC,WAAY,GACZC,OAAO,EACPC,oBAAoB,GAGtBX,EAAKY,kBAAoBZ,EAAKY,kBAAkBtE,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAoE,KACzBA,EAAKa,aAAeb,EAAKa,aAAavE,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAoE,KACpBA,EAAKc,mBAAqBd,EAAKc,mBAAmBxE,KAAxBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAoE,KAC1BA,EAAKe,6BAA+Bf,EAAKe,6BAA6BzE,KAAlCV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAoE,KACpCA,EAAKgB,yBAA2BhB,EAAKgB,yBAAyB1E,KAA9BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAoE,KAChCA,EAAKiB,iBAAmBjB,EAAKiB,iBAAiB3E,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAoE,KAnBPA,mFAsBC,IAAAkB,EAAApF,KAEZqD,EAAU,CACdD,OAAQ,MACRC,QAAS,CACPC,eAAgB,mBAChBC,cAAiBlE,IAIrB8D,MATmB7D,EAAa,2BASd+D,GACfG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJ,IAAIgB,EAAgBhB,EAAS4B,IAAI,SAAA9D,GAC/B,MAAO,CACLqB,MAAOrB,EAAO+D,GACdC,MAAOhE,EAAOC,cAGlB4D,EAAKxE,SAAS,CACZ6D,cAAiBA,MAMvBtB,MAFoB7D,EAAa,4BAEd+D,GAChBG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJ,IAAIiB,EAAiBjB,EAAS4B,IAAI,SAAAG,GAChC,MAAO,CACL5C,MAAO4C,EAAQnD,KACfkD,MAAOC,EAAQC,QAGnBL,EAAKxE,SAAS,CACZ8D,eAAgBA,MAMtBvB,MAFgB7D,EAAa,wBAEd+D,GACZG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJ,IAAIkB,EAAalB,EAAS4B,IAAI,SAAAK,GAC5B,MAAO,CACL9C,MAAO8C,EAAIJ,GACXC,MAAOG,EAAID,QAGfL,EAAKxE,SAAS,CACZ+D,WAAYA,2CAKPgB,GAAO,IAAAC,EAAA5F,KAClB2F,EAAME,iBACN,IAAIC,EAAW,CACbvE,OAAQvB,KAAKI,MAAMmB,OACnBwE,SAAU/F,KAAKI,MAAM+D,UACrBI,MAAOvE,KAAKI,MAAMmE,MAClByB,KAAMhG,KAAKI,MAAM4F,KACjBC,SAAUjG,KAAKI,MAAMoE,kBAEnBnB,EAAU,CACZD,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,cAAiBlE,GAEnB6G,KAAMC,KAAKC,UAAUN,IAIvB3C,MADkC7D,EAAa,gCACd+D,GAC9BG,KAAKK,GACLL,KAAK,SAAAC,GACJmC,EAAKhF,SAAS,CACZgE,OAAO,EACPC,oBAAoB,EACpBV,UAAWC,MAASC,IAAI,EAAG,QAAQC,SACnCC,MAAO,OAGV8B,MAAM,SAAAzB,GACLgB,EAAKhF,SAAS,CACZgE,OAAO,+CAKEhC,GACf5C,KAAKY,SAAS,CACZuD,UAAWvB,8CAIG+C,GAChB,IAAMhD,EAASgD,EAAMhD,OACfC,EAAQD,EAAOC,MACf6C,EAAO9C,EAAO8C,KAEpBzF,KAAKY,SAALd,OAAAwG,EAAA,EAAAxG,CAAA,GACG2F,EAAO7C,+CAIO2D,GACjB,IAAM3D,EAA2B,OAAnB2D,EAA0B,GAAKA,EAAe3D,MAE5D5C,KAAKY,SAAS,CACZW,OAAQqB,yDAIiB4D,EAAiBC,GAC5C,IAAMC,EAAsBF,EAAgBnB,IAAI,SAAAsB,GAC9C,OAAOA,EAAO/D,QAEhB5C,KAAKY,SAAS,CACZ4D,iBAAoBkC,qDAICF,GACvB,IAAMI,EAAeJ,EAAgBnB,IAAI,SAAAsB,GACvC,OAAOA,EAAO/D,QAEhB5C,KAAKY,SAAS,CACZoF,KAAQY,qCAKV,OACE9F,EAAAC,EAAAC,cAAA,QAAM6F,SAAU7G,KAAK+E,aAAcO,GAAG,mBACnCtF,KAAKI,MAAMyE,oBACV/D,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,sBAAsBC,KAAK,SAA1C,wBAID/G,KAAKI,MAAMwE,OACV9D,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,qBAAqBC,KAAK,SAAzC,+BAIFjG,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,UAAf,WACAlG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CACEC,aAAa,EACbnE,SAAU/C,KAAKgF,mBACfmC,QAASnH,KAAKI,MAAMqE,cACpBgB,KAAK,SACL2B,WAAY,CAAC9B,GAAI,aAGrBxE,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,QAAf,gBACAlG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CACI/B,GAAG,OACHgC,SAAUtH,KAAKI,MAAM+D,UACrBpB,SAAU/C,KAAKmF,iBACfoC,gBAAc,EACdC,cAAe,GACfC,WAAW,uBACXC,YAAY,OACZZ,UAAU,eACVa,QAASvD,MAASE,SAClBsD,QAASxD,MAASyD,MAAM,GAAGC,QAAQ,GAAGxD,SACtCyD,QAAS3D,MAASyD,MAAM,IAAIC,QAAQ,GAAGxD,SACvC0D,YAAa,KAGjBlH,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,WAAf,aACAlG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CACEE,QAASnH,KAAKI,MAAMsE,eACpB3B,SAAU/C,KAAKiF,6BACfQ,KAAK,UACLwC,SAAS,KAGbnH,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,QAAf,SACElG,EAAAC,EAAAC,cAACkH,EAAAnH,EAAD,CACEkH,SAAS,EACTd,QAASnH,KAAKI,MAAMuE,WACpB5B,SAAU/C,KAAKkF,yBACfkC,WAAY,CAAC9B,GAAI,WAGvBxE,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,SAAf,UACElG,EAAAC,EAAAC,cAAA,YACEyE,KAAK,QACLH,GAAG,QACH1C,MAAO5C,KAAKI,MAAMmE,MAClBxB,SAAU/C,KAAK8E,kBACfgC,UAAU,eACVhE,YAAY,WAIpBhC,EAAAC,EAAAC,cAAA,SAAO8F,UAAU,kBAAkBjE,KAAK,SAASD,MAAM,mBApOhCvB,aA2O3B8G,cACF,SAAAA,EAAYvI,GAAO,IAAAwI,EAAA,OAAAtI,OAAAC,EAAA,EAAAD,CAAAE,KAAAmI,IACjBC,EAAAtI,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqI,GAAAhI,KAAAH,KAAMJ,KACDQ,MAAQ,CACXoB,WAAY,GACZ6G,UAAW,GACX5G,eAAgB,GAChB6G,eAAe,EACf1D,OAAO,GAGTwD,EAAKtD,kBAAoBsD,EAAKtD,kBAAkBtE,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAsI,KACzBA,EAAKrD,aAAeqD,EAAKrD,aAAavE,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAsI,KAXHA,iFAcDzC,GAChB,IAAMhD,EAASgD,EAAMhD,OACfC,EAAQD,EAAOC,MACf6C,EAAO9C,EAAO8C,KAEpBzF,KAAKY,SAALd,OAAAwG,EAAA,EAAAxG,CAAA,GACG2F,EAAO7C,yCAIC+C,GAAO,IAAA4C,EAAAvI,KAClB2F,EAAME,iBACN,IAAMC,EAAWK,KAAKC,UAAUpG,KAAKI,OAUrC+C,MATqB7D,EAAY,2BACjB,CACd8D,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,cAAiBlE,GAEnB6G,KAAMJ,IAGLtC,KAAKK,GACLL,KAAK,SAAAC,GACJ8E,EAAK3H,SAAS,CACZ0H,eAAe,EACf1D,OAAO,EACPpD,WAAY,GACZ6G,UAAW,GACX5G,eAAgB,OAGnB4E,MAAM,SAAAzB,GACL2D,EAAK3H,SAAS,CACZgE,OAAO,uCAMb,OACE9D,EAAAC,EAAAC,cAAA,QAAM6F,SAAU7G,KAAK+E,cAClB/E,KAAKI,MAAMkI,eACVxH,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,sBAAsBC,KAAK,SAA1C,mBAID/G,KAAKI,MAAMwE,OACV9D,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,qBAAqBC,KAAK,SAAzC,+BAIFjG,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,cAAf,eACElG,EAAAC,EAAAC,cAAA,SACE6B,KAAK,OACL4C,KAAK,aACLH,GAAG,aACH1C,MAAO5C,KAAKI,MAAMoB,WAClBuB,SAAU/C,KAAK8E,kBACfgC,UAAU,eACVhE,YAAY,sBAGlBhC,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACbhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,aAAf,cACAlG,EAAAC,EAAAC,cAAA,SACE6B,KAAK,OACL4C,KAAK,YACLH,GAAG,YACH1C,MAAO5C,KAAKI,MAAMiI,UAClBtF,SAAU/C,KAAK8E,kBACfgC,UAAU,eACVhE,YAAY,qBAGhBhC,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,cACfhG,EAAAC,EAAAC,cAAA,SAAOgG,QAAQ,kBAAf,kBACElG,EAAAC,EAAAC,cAAA,SACE6B,KAAK,OACL4C,KAAK,iBACL7C,MAAO5C,KAAKI,MAAMqB,eAClBsB,SAAU/C,KAAK8E,kBACfQ,GAAG,iBACHwB,UAAU,eACVhE,YAAY,0BAGhBhC,EAAAC,EAAAC,cAAA,SAAO8F,UAAU,kBAAkBjE,KAAK,SAASD,MAAM,mBAxGrCvB,aA+GtBmH,cACJ,SAAAA,EAAY5I,GAAO,IAAA6I,EAAA,OAAA3I,OAAAC,EAAA,EAAAD,CAAAE,KAAAwI,IACjBC,EAAA3I,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0I,GAAArI,KAAAH,KAAMJ,KAaR8I,aAAe,SAAA/C,GACb8C,EAAK7H,SAALd,OAAAwG,EAAA,EAAAxG,CAAA,GACG6F,EAAMhD,OAAO2C,GAAKK,EAAMhD,OAAOC,SAhBjB6F,EAoBnB1D,aAAe,SAAAY,GACbA,EAAME,iBACN,IAAM8C,EAAc,CAClBC,SAAUH,EAAKrI,MAAMwI,SACrBC,SAAUJ,EAAKrI,MAAMyI,UAGjB/C,EAAW,CACb1C,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElB4C,KAAMC,KAAKC,UAAUuC,IAIzBxF,MAF2B7D,EAAa,QAEdwG,GACvBtC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACAA,EAASqF,iBACXL,EAAK7H,SAAS,CACZmI,YAAatF,EAASqF,iBAAiB,MAGzCvJ,EAASkE,EAASjE,OAClBiJ,EAAK7I,MAAMW,mBA1CjBkI,EAAKrI,MAAQ,CACXwI,SAAU,GACVC,SAAU,GACVE,YAAa,IANEN,8EAWjB,OAAOzI,KAAKI,MAAMwI,SAASI,OAAS,GAAKhJ,KAAKI,MAAMyI,SAASG,OAAS,mCAwCtE,OACElI,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,SACbhG,EAAAC,EAAAC,cAAA,QAAM6F,SAAU7G,KAAK+E,cACnBjE,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAO,SACrCrI,EAAAC,EAAAC,cAACoI,EAAA,EAAD,iBACAtI,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACEC,WAAS,EACTzG,KAAK,OACLD,MAAO5C,KAAKI,MAAMwI,SAClB7F,SAAU/C,KAAK0I,gBAGnB5H,EAAAC,EAAAC,cAACiI,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAO,SACrCrI,EAAAC,EAAAC,cAACoI,EAAA,EAAD,iBACAtI,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACEzG,MAAO5C,KAAKI,MAAMyI,SAClB9F,SAAU/C,KAAK0I,aACf7F,KAAK,cAGR7C,KAAKI,MAAM2I,YACZjI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CACEC,OAAK,EACLL,OAAO,QACPM,UAAWzJ,KAAK0J,eAChB7G,KAAK,UAJP,kBAzEUxB,aC/hBAsI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnJ,EAAAC,EAAAC,cAACkJ,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/G,KAAK,SAAAgH,GACjCA,EAAaC","file":"static/js/main.262af0af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/lib/Creatable';\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\n\nlet AUTH_TOKEN;\nconst apiBaseURL = 'https://pypatty.com/';\n\nfunction setToken(token) {\n  localStorage.setItem('auth_token', token);\n  AUTH_TOKEN = 'Token ' + token;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      app_name: 'ACxAC',\n      isLoggedIn: false,\n    }\n\n    this.makeLoggedIn = this.makeLoggedIn.bind(this);\n  }\n\n  componentDidMount() {\n    let storedToken = localStorage.getItem('auth_token');\n    if (storedToken) {\n      setToken(storedToken);\n      this.setState({\n        isLoggedIn: true,\n      })\n    }\n  }\n\n  makeLoggedIn(user) {\n    this.setState({\n      isLoggedIn: true,\n    });\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n\n    if (isLoggedIn) {\n      return (\n        <div>\n          Welcome!\n          <hr></hr>\n          <h6>Search Client</h6>\n          <FilterableClientTable />\n          <hr></hr>\n          <h6>Add Client</h6>\n          <NewClientForm />\n          <hr></hr>\n          <h6>New Appointment</h6>\n          <NewAppointmentForm />\n        </div>\n      )\n    } else {\n      return (\n        <Login\n          makeLoggedIn={this.makeLoggedIn}\n        />\n      )\n    } \n  }\n}\n\n\n\n\nclass ClientRow extends React.Component {\n  render() {\n    const client = this.props.client;\n\n    return (\n      <tr>\n        <td>{client.first_name}</td>\n        <td>{client.contact_number}</td>\n      </tr>\n    );\n  }\n}\n\n\nclass ClientTable extends React.Component {\n  render() {\n    const filterText = this.props.filterText;\n    const rows = [];\n\n    this.props.clients.forEach((client) => {\n      if (client.first_name.toLowerCase().indexOf(filterText) === -1) {\n        return;\n      }\n      rows.push(\n        <ClientRow\n          client={client}\n          key={client.uuid}\n        />\n      );\n    });\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Contact No.</th>\n          </tr>\n        </thead>\n        <tbody>{filterText ? rows: false}</tbody>\n      </table>\n    );\n  }\n}\n\n\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n  }\n  \n  handleFilterTextChange(e) {\n    this.props.onFilterTextChange(e.target.value);\n  }\n  \n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={this.props.filterText}\n          onChange={this.handleFilterTextChange}\n        />\n      </form>\n    );\n  }\n}\n\n\nclass FilterableClientTable extends Component {\n  constructor() {\n    super();\n    this.state = {\n      clients: [],\n      filterText: '',\n    }\n\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n  }\n\n  componentDidMount() {\n    const clientList = apiBaseURL + 'appointment/api/clients/';\n    const headers = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': AUTH_TOKEN,\n      }\n    }\n    fetch(clientList, headers)\n      .then(response => response.json())\n      .then(response => {\n        this.setState({\n          clients: response,\n        });\n      })\n  }\n\n  handleFilterTextChange(filterText) {\n    this.setState({\n      filterText: filterText\n    });\n  }\n  render() {\n    return (\n      <div>\n        <SearchBar\n          filterText={this.state.filterText}\n          onFilterTextChange={this.handleFilterTextChange}\n        />\n        <ClientTable\n          clients={this.state.clients}\n          filterText={this.state.filterText}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response;\n}\n\n\nclass NewAppointmentForm extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        startDate: moment().add(1, 'days').toDate(),\n        client: '',\n        notes: '',\n        selectedServices: [],\n        clientOptions: [],\n        serviceOptions: [],\n        tagOptions: [],\n        error: false,\n        appointmentCreated: false,\n      }\n\n      this.handleInputChange = this.handleInputChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleClientChange = this.handleClientChange.bind(this);\n      this.handleSelectedServicesChange = this.handleSelectedServicesChange.bind(this);\n      this.handleSelectedTagsChange = this.handleSelectedTagsChange.bind(this);\n      this.handleDateChange = this.handleDateChange.bind(this);\n    }\n\n    componentDidMount() {\n      const clientList = apiBaseURL + 'appointment/api/clients/';\n      const headers = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': AUTH_TOKEN,\n        }\n      }\n\n      fetch(clientList, headers)\n        .then(response => response.json())\n        .then(response => {\n          let clientOptions = response.map(client => {\n            return {\n              value: client.id,\n              label: client.first_name,\n            };\n          });\n          this.setState({\n            'clientOptions': clientOptions,\n          });\n        })\n\n      const serviceList = apiBaseURL + 'appointment/api/services/';\n\n      fetch(serviceList, headers)\n        .then(response => response.json())\n        .then(response => {\n          let serviceOptions = response.map(service => {\n            return {\n              value: service.uuid,\n              label: service.name,\n            }\n          });\n          this.setState({\n            serviceOptions: serviceOptions,\n          })\n        })\n\n      const tagList = apiBaseURL + 'appointment/api/tags/';\n\n      fetch(tagList, headers)\n        .then(response => response.json())\n        .then(response => {\n          let tagOptions = response.map(tag => {\n            return {\n              value: tag.id,\n              label: tag.name,\n            }\n          });\n          this.setState({\n            tagOptions: tagOptions,\n          });\n        })\n    }\n\n    handleSubmit(event) {\n      event.preventDefault();\n      let postData = {\n        client: this.state.client,\n        datetime: this.state.startDate,\n        notes: this.state.notes,\n        tags: this.state.tags,\n        services: this.state.selectedServices,\n      }\n      let headers = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': AUTH_TOKEN,\n        },\n        body: JSON.stringify(postData),\n      }\n\n      const createAppointmentEndpoint = apiBaseURL + 'appointment/api/appointments/';\n      fetch(createAppointmentEndpoint, headers)\n        .then(handleErrors)\n        .then(response => {\n          this.setState({\n            error: false,\n            appointmentCreated: true,\n            startDate: moment().add(1, 'days').toDate(),\n            notes: '',\n          });\n        })\n        .catch(error => {\n          this.setState({\n            error: true,\n          })\n        });\n      }\n\n    handleDateChange(value) {\n      this.setState({\n        startDate: value,\n      });\n    }\n\n    handleInputChange(event) {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name\n\n      this.setState({\n        [name]: value,\n      });\n    }\n\n    handleClientChange(selectedOption) {\n      const value = selectedOption === null ? '' : selectedOption.value;\n\n      this.setState({\n        client: value,\n      });\n    }\n\n    handleSelectedServicesChange(selectedOptions, k) {\n      const selectedServicesIDs = selectedOptions.map(option => {\n        return option.value;\n      });\n      this.setState({\n        'selectedServices': selectedServicesIDs,\n      });\n    }\n\n    handleSelectedTagsChange(selectedOptions){\n      const selectedTags = selectedOptions.map(option =>{\n        return option.value;\n      });\n      this.setState({\n        'tags': selectedTags,\n      })\n    }\n\n    render() {\n      return (\n        <form onSubmit={this.handleSubmit} id=\"appointmentForm\">\n          {this.state.appointmentCreated && \n            <div className=\"alert alert-success\" role=\"alert\">\n              Appointment created!\n            </div>\n          }\n          {this.state.error && \n            <div className=\"alert alert-danger\" role=\"alert\">\n              Please review errors below.\n            </div>\n          }\n          <div className=\"form-group\">\n            <label htmlFor=\"client\">Client:</label>\n            <Select\n              isClearable={true}\n              onChange={this.handleClientChange}\n              options={this.state.clientOptions}\n              name=\"client\"\n              inputProps={{id: \"client\"}}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"date\">Date & Time:</label>\n            <DatePicker\n                id=\"date\"\n                selected={this.state.startDate}\n                onChange={this.handleDateChange}\n                showTimeSelect\n                timeIntervals={30}\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\n                timeCaption=\"time\"\n                className=\"form-control\"\n                minDate={moment().toDate()}\n                minTime={moment().hours(7).minutes(0).toDate()}\n                maxTime={moment().hours(21).minutes(0).toDate()}\n                monthsShown={2}\n            />\n          </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"service\">Services:</label>\n              <Select\n                options={this.state.serviceOptions}\n                onChange={this.handleSelectedServicesChange}\n                name=\"service\"\n                isMulti={true}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"tags\">Tags:</label>\n                <CreatableSelect\n                  isMulti={true}\n                  options={this.state.tagOptions}\n                  onChange={this.handleSelectedTagsChange}\n                  inputProps={{id: \"tags\"}}\n                />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"notes\">Notes:</label>\n                <textarea\n                  name=\"notes\"\n                  id=\"notes\"\n                  value={this.state.notes}\n                  onChange={this.handleInputChange}\n                  className=\"form-control\"\n                  placeholder=\"Notes\"\n                >\n                </textarea>\n            </div>\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Submit\" />\n        </form>\n      )\n    }\n}\n\n\nclass NewClientForm extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        first_name: '',\n        last_name: '',\n        contact_number: '',\n        clientCreated: false,\n        error: false,\n      }\n\n      this.handleInputChange = this.handleInputChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name\n\n      this.setState({\n        [name]: value,\n      })\n    }\n\n    handleSubmit(event) {\n      event.preventDefault();\n      const postData = JSON.stringify(this.state);\n      const createClient = apiBaseURL +'appointment/api/clients/';\n      const headers = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': AUTH_TOKEN,\n        },\n        body: postData,\n      }\n      fetch(createClient, headers)\n        .then(handleErrors)\n        .then(response => {\n          this.setState({\n            clientCreated: true,\n            error: false,\n            first_name: '',\n            last_name: '',\n            contact_number: '',\n          });\n        })\n        .catch(error => {\n          this.setState({\n            error: true,\n          });\n        });\n    }\n\n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          {this.state.clientCreated && \n            <div className=\"alert alert-success\" role=\"alert\">\n              Client created!\n            </div>\n          }\n          {this.state.error && \n            <div className=\"alert alert-danger\" role=\"alert\">\n              Please review errors below.\n            </div>\n          }\n          <div className=\"form-group\">\n            <label htmlFor=\"first_name\">First Name:</label>\n              <input\n                type=\"text\"\n                name=\"first_name\"\n                id=\"first_name\"\n                value={this.state.first_name}\n                onChange={this.handleInputChange}\n                className=\"form-control\"\n                placeholder=\"Enter first name\"\n              />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"last_name\">Last Name:</label>\n            <input\n              type=\"text\"\n              name=\"last_name\"\n              id=\"last_name\"\n              value={this.state.last_name}\n              onChange={this.handleInputChange}\n              className=\"form-control\"\n              placeholder=\"Enter last name\"\n            />\n          </div>\n          <div className=\"form-group\">\n          <label htmlFor=\"contact_number\">Contact Number</label>\n            <input\n              type=\"text\"\n              name=\"contact_number\"\n              value={this.state.contact_number}\n              onChange={this.handleInputChange}\n              id=\"contact_number\"\n              className=\"form-control\"\n              placeholder=\"Enter contact number\"\n            />\n          </div>\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Submit\" />\n        </form>\n      )\n    }\n}\n\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\",\n      loginResult: '',\n    };\n  }\n\n  validateForm() {\n    return this.state.username.length > 0 && this.state.password.length > 0;\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const credentials = {\n      username: this.state.username,\n      password: this.state.password,\n    }\n\n    const postData = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n    }\n    const obtainAuthTokenURL = apiBaseURL + 'auth/';\n\n    fetch(obtainAuthTokenURL, postData)\n      .then(response => response.json())\n      .then(response => {\n        if (response.non_field_errors) {\n          this.setState({\n            loginResult: response.non_field_errors[0],\n          });\n        } else {\n          setToken(response.token);\n          this.props.makeLoggedIn();\n        }\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <form onSubmit={this.handleSubmit}>\n          <FormGroup controlId=\"username\" bsSize=\"large\">\n            <ControlLabel>Username</ControlLabel>\n            <FormControl\n              autoFocus\n              type=\"text\"\n              value={this.state.username  }\n              onChange={this.handleChange}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"password\" bsSize=\"large\">\n            <ControlLabel>Password</ControlLabel>\n            <FormControl\n              value={this.state.password}\n              onChange={this.handleChange}\n              type=\"password\"\n            />\n          </FormGroup>\n          {this.state.loginResult}\n          <Button\n            block\n            bsSize=\"large\"\n            disabled={!this.validateForm()}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}